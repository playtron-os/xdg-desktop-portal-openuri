# Build and publish a release of InputPlumber using semantic-release whenever
# changes are merged into main.
name: "ðŸŽ‰ Release"

permissions: write-all

on:
  push:
    branches:
      - main
      - v0.x
      - v1.x
    paths-ignore:
      - README.md

# Jobs to run
jobs:
  release:
    name: ðŸŽ‰ Publish to GitHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm install @semantic-release/exec @google/semantic-release-replace-plugin @semantic-release/git

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.gpg.outputs.name}}
          GIT_AUTHOR_EMAIL: ${{ steps.gpg.outputs.email}}
          GIT_COMMITTER_NAME: ${{ steps.gpg.outputs.name}}
          GIT_COMMITTER_EMAIL: ${{ steps.gpg.outputs.email}}
          # Editor needs to be set to handle annotated tags which are required
          # for tag signing.
          EDITOR: "echo 'Created-by: semantic-release' > $1"
        run: npx semantic-release

      # In ".releaserc.yaml" a step is defined to write the release version to
      # ".version.txt" upon successful release. This step checks to see if that
      # exists to determine if the other jobs need to run.
      - id: status
        name: Set release status
        shell: bash
        run: |
          if [ -f .version.txt ]; then
            echo "was_released=yes" >> "$GITHUB_OUTPUT"
          else
            echo "was_released=no" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Release Version
        uses: actions/upload-artifact@v4
        if: steps.status.outputs.was_released == 'yes'
        with:
          name: version.txt
          path: .version.txt
          if-no-files-found: error
          include-hidden-files: true

    outputs:
      should_publish: ${{ steps.status.outputs.was_released }}

  publish-to-copr:
    name: ðŸŸ¤ Publish to COPR
    needs: release
    if: needs.release.outputs.should_publish == 'yes'
    runs-on: ubuntu-latest

    steps:
      - name: Trigger COPR Build
        run: curl -X POST ${{ secrets.COPR_WEBHOOK_URL }}
